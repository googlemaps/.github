// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by gapic-generator. DO NOT EDIT.

package routes

import (
	"context"
	"math"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/transport"
	routespb "google.golang.org/genproto/googleapis/maps/routes/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
)

// RoutesPreferredCallOptions contains the retry settings for each method of RoutesPreferredClient.
type RoutesPreferredCallOptions struct {
	ComputeRoutes []gax.CallOption
}

func defaultRoutesPreferredClientOptions() []option.ClientOption {
	return []option.ClientOption{
		option.WithEndpoint("routespreferred.googleapis.com:443"),
		option.WithScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultRoutesPreferredCallOptions() *RoutesPreferredCallOptions {
	retry := map[[2]string][]gax.CallOption{
		{"default", "idempotent"}: {
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        30000 * time.Millisecond,
					Multiplier: 1.3,
				})
			}),
		},
	}
	return &RoutesPreferredCallOptions{
		ComputeRoutes: retry[[2]string{"default", "idempotent"}],
	}
}

// RoutesPreferredClient is a client for interacting with Routes Preferred API.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type RoutesPreferredClient struct {
	// The connection to the service.
	conn *grpc.ClientConn

	// The gRPC API client.
	routesPreferredClient routespb.RoutesPreferredClient

	// The call options for this service.
	CallOptions *RoutesPreferredCallOptions

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewRoutesPreferredClient creates a new routes preferred client.
//
// The Routes Preferred API.
func NewRoutesPreferredClient(ctx context.Context, opts ...option.ClientOption) (*RoutesPreferredClient, error) {
	conn, err := transport.DialGRPC(ctx, append(defaultRoutesPreferredClientOptions(), opts...)...)
	if err != nil {
		return nil, err
	}
	c := &RoutesPreferredClient{
		conn:        conn,
		CallOptions: defaultRoutesPreferredCallOptions(),

		routesPreferredClient: routespb.NewRoutesPreferredClient(conn),
	}
	c.setGoogleClientInfo()
	return c, nil
}

// Connection returns the client's connection to the API service.
func (c *RoutesPreferredClient) Connection() *grpc.ClientConn {
	return c.conn
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *RoutesPreferredClient) Close() error {
	return c.conn.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *RoutesPreferredClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// ComputeRoutes returns the primary route along with optional alternate routes, given a set
// of terminal and intermediate waypoints.
//
// **NOTE:** This method requires that you specify a response field mask in
// the input. You can provide the response field mask by using URL parameter
// `$fields` or `fields`, or by using an HTTP/gRPC header `X-Goog-FieldMask`
// (see the [available URL parameters and
// headers](https://cloud.google.com/apis/docs/system-parameters). The value
// is a comma separated list of field paths. See detailed documentation about
// [how to construct the field
// paths](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto).
//
// For example, in this method:
//
// * Field mask of all available fields (for manual inspection):
//   `X-Goog-FieldMask: *`
// * Field mask of Route-level duration, distance, and polyline (an example
// production setup):
//   `X-Goog-FieldMask: routes.duration,routes.distanceMeters,routes.polyline`
//
// Google discourage the use of the wildcard (`*`) response field mask, or
// specifying the field mask at the top level (`routes`), because:
//
// * Selecting only the fields that you need helps our server save computation
// cycles, allowing us to return the result to you with a lower latency.
// * Selecting only the fields that you need
// in your production job ensures stable latency performance. We might add
// more response fields in the future, and those new fields might require
// extra computation time. If you select all fields, or if you select all
// fields at the top level, then you might experience performance degradation
// because any new field we add will be automatically included in the
// response.
// * Selecting only the fields that you need results in a smaller response
// size, and thus higher network throughput.
func (c *RoutesPreferredClient) ComputeRoutes(ctx context.Context, req *routespb.ComputeRoutesRequest, opts ...gax.CallOption) (*routespb.ComputeRoutesResponse, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append(c.CallOptions.ComputeRoutes[0:len(c.CallOptions.ComputeRoutes):len(c.CallOptions.ComputeRoutes)], opts...)
	var resp *routespb.ComputeRoutesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.routesPreferredClient.ComputeRoutes(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
