// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/routes/v1/compute_routes_request.proto

package com.google.maps.routes.v1;

/**
 * <pre>
 * Encapsulates a set of optional conditions to satisfy when calculating the
 * routes.
 * </pre>
 *
 * Protobuf type {@code google.maps.routes.v1.RouteModifiers}
 */
public  final class RouteModifiers extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.maps.routes.v1.RouteModifiers)
    RouteModifiersOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RouteModifiers.newBuilder() to construct.
  private RouteModifiers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RouteModifiers() {
    tollPasses_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RouteModifiers();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private RouteModifiers(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            avoidTolls_ = input.readBool();
            break;
          }
          case 16: {

            avoidHighways_ = input.readBool();
            break;
          }
          case 24: {

            avoidFerries_ = input.readBool();
            break;
          }
          case 32: {

            avoidIndoor_ = input.readBool();
            break;
          }
          case 42: {
            com.google.maps.routes.v1.VehicleInfo.Builder subBuilder = null;
            if (vehicleInfo_ != null) {
              subBuilder = vehicleInfo_.toBuilder();
            }
            vehicleInfo_ = input.readMessage(com.google.maps.routes.v1.VehicleInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(vehicleInfo_);
              vehicleInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 48: {
            int rawValue = input.readEnum();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              tollPasses_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            tollPasses_.add(rawValue);
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                tollPasses_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              tollPasses_.add(rawValue);
            }
            input.popLimit(oldLimit);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        tollPasses_ = java.util.Collections.unmodifiableList(tollPasses_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.maps.routes.v1.ComputeRoutesRequestProto.internal_static_google_maps_routes_v1_RouteModifiers_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.routes.v1.ComputeRoutesRequestProto.internal_static_google_maps_routes_v1_RouteModifiers_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.routes.v1.RouteModifiers.class, com.google.maps.routes.v1.RouteModifiers.Builder.class);
  }

  public static final int AVOID_TOLLS_FIELD_NUMBER = 1;
  private boolean avoidTolls_;
  /**
   * <pre>
   * Specifies whether to avoid toll roads. Applies only to the `DRIVE` and
   * `TWO_WHEELER` travel modes.
   * </pre>
   *
   * <code>bool avoid_tolls = 1;</code>
   * @return The avoidTolls.
   */
  public boolean getAvoidTolls() {
    return avoidTolls_;
  }

  public static final int AVOID_HIGHWAYS_FIELD_NUMBER = 2;
  private boolean avoidHighways_;
  /**
   * <pre>
   * Specifies whether to avoid highways. Applies only to the `DRIVE` and
   * `TWO_WHEELER` travel modes.
   * </pre>
   *
   * <code>bool avoid_highways = 2;</code>
   * @return The avoidHighways.
   */
  public boolean getAvoidHighways() {
    return avoidHighways_;
  }

  public static final int AVOID_FERRIES_FIELD_NUMBER = 3;
  private boolean avoidFerries_;
  /**
   * <pre>
   * Specifies whether to avoid ferries. Applies only to the `DRIVE` and
   * `TWO_WHEELER` travel modes.
   * </pre>
   *
   * <code>bool avoid_ferries = 3;</code>
   * @return The avoidFerries.
   */
  public boolean getAvoidFerries() {
    return avoidFerries_;
  }

  public static final int AVOID_INDOOR_FIELD_NUMBER = 4;
  private boolean avoidIndoor_;
  /**
   * <pre>
   * Specifies whether to avoid navigating indoors. Applies only to the `WALK`
   * travel mode.
   * </pre>
   *
   * <code>bool avoid_indoor = 4;</code>
   * @return The avoidIndoor.
   */
  public boolean getAvoidIndoor() {
    return avoidIndoor_;
  }

  public static final int VEHICLE_INFO_FIELD_NUMBER = 5;
  private com.google.maps.routes.v1.VehicleInfo vehicleInfo_;
  /**
   * <pre>
   * Optional. Specifies the vehicle information.
   * </pre>
   *
   * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
   * @return Whether the vehicleInfo field is set.
   */
  public boolean hasVehicleInfo() {
    return vehicleInfo_ != null;
  }
  /**
   * <pre>
   * Optional. Specifies the vehicle information.
   * </pre>
   *
   * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
   * @return The vehicleInfo.
   */
  public com.google.maps.routes.v1.VehicleInfo getVehicleInfo() {
    return vehicleInfo_ == null ? com.google.maps.routes.v1.VehicleInfo.getDefaultInstance() : vehicleInfo_;
  }
  /**
   * <pre>
   * Optional. Specifies the vehicle information.
   * </pre>
   *
   * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
   */
  public com.google.maps.routes.v1.VehicleInfoOrBuilder getVehicleInfoOrBuilder() {
    return getVehicleInfo();
  }

  public static final int TOLL_PASSES_FIELD_NUMBER = 6;
  private java.util.List<java.lang.Integer> tollPasses_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, com.google.maps.routes.v1.TollPass> tollPasses_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.google.maps.routes.v1.TollPass>() {
            public com.google.maps.routes.v1.TollPass convert(java.lang.Integer from) {
              @SuppressWarnings("deprecation")
              com.google.maps.routes.v1.TollPass result = com.google.maps.routes.v1.TollPass.valueOf(from);
              return result == null ? com.google.maps.routes.v1.TollPass.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * Encapsulates information about toll passes.
   * TollPass is unset means no available pass.
   * Applies only to the DRIVE and TWO_WHEELER travel modes.
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
   * @return A list containing the tollPasses.
   */
  public java.util.List<com.google.maps.routes.v1.TollPass> getTollPassesList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.google.maps.routes.v1.TollPass>(tollPasses_, tollPasses_converter_);
  }
  /**
   * <pre>
   * Encapsulates information about toll passes.
   * TollPass is unset means no available pass.
   * Applies only to the DRIVE and TWO_WHEELER travel modes.
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
   * @return The count of tollPasses.
   */
  public int getTollPassesCount() {
    return tollPasses_.size();
  }
  /**
   * <pre>
   * Encapsulates information about toll passes.
   * TollPass is unset means no available pass.
   * Applies only to the DRIVE and TWO_WHEELER travel modes.
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
   * @param index The index of the element to return.
   * @return The tollPasses at the given index.
   */
  public com.google.maps.routes.v1.TollPass getTollPasses(int index) {
    return tollPasses_converter_.convert(tollPasses_.get(index));
  }
  /**
   * <pre>
   * Encapsulates information about toll passes.
   * TollPass is unset means no available pass.
   * Applies only to the DRIVE and TWO_WHEELER travel modes.
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
   * @return A list containing the enum numeric values on the wire for tollPasses.
   */
  public java.util.List<java.lang.Integer>
  getTollPassesValueList() {
    return tollPasses_;
  }
  /**
   * <pre>
   * Encapsulates information about toll passes.
   * TollPass is unset means no available pass.
   * Applies only to the DRIVE and TWO_WHEELER travel modes.
   * </pre>
   *
   * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of tollPasses at the given index.
   */
  public int getTollPassesValue(int index) {
    return tollPasses_.get(index);
  }
  private int tollPassesMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (avoidTolls_ != false) {
      output.writeBool(1, avoidTolls_);
    }
    if (avoidHighways_ != false) {
      output.writeBool(2, avoidHighways_);
    }
    if (avoidFerries_ != false) {
      output.writeBool(3, avoidFerries_);
    }
    if (avoidIndoor_ != false) {
      output.writeBool(4, avoidIndoor_);
    }
    if (vehicleInfo_ != null) {
      output.writeMessage(5, getVehicleInfo());
    }
    if (getTollPassesList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(tollPassesMemoizedSerializedSize);
    }
    for (int i = 0; i < tollPasses_.size(); i++) {
      output.writeEnumNoTag(tollPasses_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (avoidTolls_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, avoidTolls_);
    }
    if (avoidHighways_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, avoidHighways_);
    }
    if (avoidFerries_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, avoidFerries_);
    }
    if (avoidIndoor_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, avoidIndoor_);
    }
    if (vehicleInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getVehicleInfo());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < tollPasses_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(tollPasses_.get(i));
      }
      size += dataSize;
      if (!getTollPassesList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }tollPassesMemoizedSerializedSize = dataSize;
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.maps.routes.v1.RouteModifiers)) {
      return super.equals(obj);
    }
    com.google.maps.routes.v1.RouteModifiers other = (com.google.maps.routes.v1.RouteModifiers) obj;

    if (getAvoidTolls()
        != other.getAvoidTolls()) return false;
    if (getAvoidHighways()
        != other.getAvoidHighways()) return false;
    if (getAvoidFerries()
        != other.getAvoidFerries()) return false;
    if (getAvoidIndoor()
        != other.getAvoidIndoor()) return false;
    if (hasVehicleInfo() != other.hasVehicleInfo()) return false;
    if (hasVehicleInfo()) {
      if (!getVehicleInfo()
          .equals(other.getVehicleInfo())) return false;
    }
    if (!tollPasses_.equals(other.tollPasses_)) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + AVOID_TOLLS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAvoidTolls());
    hash = (37 * hash) + AVOID_HIGHWAYS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAvoidHighways());
    hash = (37 * hash) + AVOID_FERRIES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAvoidFerries());
    hash = (37 * hash) + AVOID_INDOOR_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAvoidIndoor());
    if (hasVehicleInfo()) {
      hash = (37 * hash) + VEHICLE_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getVehicleInfo().hashCode();
    }
    if (getTollPassesCount() > 0) {
      hash = (37 * hash) + TOLL_PASSES_FIELD_NUMBER;
      hash = (53 * hash) + tollPasses_.hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.routes.v1.RouteModifiers parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.routes.v1.RouteModifiers parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.maps.routes.v1.RouteModifiers prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Encapsulates a set of optional conditions to satisfy when calculating the
   * routes.
   * </pre>
   *
   * Protobuf type {@code google.maps.routes.v1.RouteModifiers}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.maps.routes.v1.RouteModifiers)
      com.google.maps.routes.v1.RouteModifiersOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.maps.routes.v1.ComputeRoutesRequestProto.internal_static_google_maps_routes_v1_RouteModifiers_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.routes.v1.ComputeRoutesRequestProto.internal_static_google_maps_routes_v1_RouteModifiers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.routes.v1.RouteModifiers.class, com.google.maps.routes.v1.RouteModifiers.Builder.class);
    }

    // Construct using com.google.maps.routes.v1.RouteModifiers.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      avoidTolls_ = false;

      avoidHighways_ = false;

      avoidFerries_ = false;

      avoidIndoor_ = false;

      if (vehicleInfoBuilder_ == null) {
        vehicleInfo_ = null;
      } else {
        vehicleInfo_ = null;
        vehicleInfoBuilder_ = null;
      }
      tollPasses_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.maps.routes.v1.ComputeRoutesRequestProto.internal_static_google_maps_routes_v1_RouteModifiers_descriptor;
    }

    @java.lang.Override
    public com.google.maps.routes.v1.RouteModifiers getDefaultInstanceForType() {
      return com.google.maps.routes.v1.RouteModifiers.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.routes.v1.RouteModifiers build() {
      com.google.maps.routes.v1.RouteModifiers result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.routes.v1.RouteModifiers buildPartial() {
      com.google.maps.routes.v1.RouteModifiers result = new com.google.maps.routes.v1.RouteModifiers(this);
      int from_bitField0_ = bitField0_;
      result.avoidTolls_ = avoidTolls_;
      result.avoidHighways_ = avoidHighways_;
      result.avoidFerries_ = avoidFerries_;
      result.avoidIndoor_ = avoidIndoor_;
      if (vehicleInfoBuilder_ == null) {
        result.vehicleInfo_ = vehicleInfo_;
      } else {
        result.vehicleInfo_ = vehicleInfoBuilder_.build();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        tollPasses_ = java.util.Collections.unmodifiableList(tollPasses_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.tollPasses_ = tollPasses_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.routes.v1.RouteModifiers) {
        return mergeFrom((com.google.maps.routes.v1.RouteModifiers)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.routes.v1.RouteModifiers other) {
      if (other == com.google.maps.routes.v1.RouteModifiers.getDefaultInstance()) return this;
      if (other.getAvoidTolls() != false) {
        setAvoidTolls(other.getAvoidTolls());
      }
      if (other.getAvoidHighways() != false) {
        setAvoidHighways(other.getAvoidHighways());
      }
      if (other.getAvoidFerries() != false) {
        setAvoidFerries(other.getAvoidFerries());
      }
      if (other.getAvoidIndoor() != false) {
        setAvoidIndoor(other.getAvoidIndoor());
      }
      if (other.hasVehicleInfo()) {
        mergeVehicleInfo(other.getVehicleInfo());
      }
      if (!other.tollPasses_.isEmpty()) {
        if (tollPasses_.isEmpty()) {
          tollPasses_ = other.tollPasses_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureTollPassesIsMutable();
          tollPasses_.addAll(other.tollPasses_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.maps.routes.v1.RouteModifiers parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.maps.routes.v1.RouteModifiers) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private boolean avoidTolls_ ;
    /**
     * <pre>
     * Specifies whether to avoid toll roads. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_tolls = 1;</code>
     * @return The avoidTolls.
     */
    public boolean getAvoidTolls() {
      return avoidTolls_;
    }
    /**
     * <pre>
     * Specifies whether to avoid toll roads. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_tolls = 1;</code>
     * @param value The avoidTolls to set.
     * @return This builder for chaining.
     */
    public Builder setAvoidTolls(boolean value) {
      
      avoidTolls_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies whether to avoid toll roads. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_tolls = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearAvoidTolls() {
      
      avoidTolls_ = false;
      onChanged();
      return this;
    }

    private boolean avoidHighways_ ;
    /**
     * <pre>
     * Specifies whether to avoid highways. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_highways = 2;</code>
     * @return The avoidHighways.
     */
    public boolean getAvoidHighways() {
      return avoidHighways_;
    }
    /**
     * <pre>
     * Specifies whether to avoid highways. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_highways = 2;</code>
     * @param value The avoidHighways to set.
     * @return This builder for chaining.
     */
    public Builder setAvoidHighways(boolean value) {
      
      avoidHighways_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies whether to avoid highways. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_highways = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearAvoidHighways() {
      
      avoidHighways_ = false;
      onChanged();
      return this;
    }

    private boolean avoidFerries_ ;
    /**
     * <pre>
     * Specifies whether to avoid ferries. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_ferries = 3;</code>
     * @return The avoidFerries.
     */
    public boolean getAvoidFerries() {
      return avoidFerries_;
    }
    /**
     * <pre>
     * Specifies whether to avoid ferries. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_ferries = 3;</code>
     * @param value The avoidFerries to set.
     * @return This builder for chaining.
     */
    public Builder setAvoidFerries(boolean value) {
      
      avoidFerries_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies whether to avoid ferries. Applies only to the `DRIVE` and
     * `TWO_WHEELER` travel modes.
     * </pre>
     *
     * <code>bool avoid_ferries = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearAvoidFerries() {
      
      avoidFerries_ = false;
      onChanged();
      return this;
    }

    private boolean avoidIndoor_ ;
    /**
     * <pre>
     * Specifies whether to avoid navigating indoors. Applies only to the `WALK`
     * travel mode.
     * </pre>
     *
     * <code>bool avoid_indoor = 4;</code>
     * @return The avoidIndoor.
     */
    public boolean getAvoidIndoor() {
      return avoidIndoor_;
    }
    /**
     * <pre>
     * Specifies whether to avoid navigating indoors. Applies only to the `WALK`
     * travel mode.
     * </pre>
     *
     * <code>bool avoid_indoor = 4;</code>
     * @param value The avoidIndoor to set.
     * @return This builder for chaining.
     */
    public Builder setAvoidIndoor(boolean value) {
      
      avoidIndoor_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies whether to avoid navigating indoors. Applies only to the `WALK`
     * travel mode.
     * </pre>
     *
     * <code>bool avoid_indoor = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAvoidIndoor() {
      
      avoidIndoor_ = false;
      onChanged();
      return this;
    }

    private com.google.maps.routes.v1.VehicleInfo vehicleInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.maps.routes.v1.VehicleInfo, com.google.maps.routes.v1.VehicleInfo.Builder, com.google.maps.routes.v1.VehicleInfoOrBuilder> vehicleInfoBuilder_;
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     * @return Whether the vehicleInfo field is set.
     */
    public boolean hasVehicleInfo() {
      return vehicleInfoBuilder_ != null || vehicleInfo_ != null;
    }
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     * @return The vehicleInfo.
     */
    public com.google.maps.routes.v1.VehicleInfo getVehicleInfo() {
      if (vehicleInfoBuilder_ == null) {
        return vehicleInfo_ == null ? com.google.maps.routes.v1.VehicleInfo.getDefaultInstance() : vehicleInfo_;
      } else {
        return vehicleInfoBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     */
    public Builder setVehicleInfo(com.google.maps.routes.v1.VehicleInfo value) {
      if (vehicleInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        vehicleInfo_ = value;
        onChanged();
      } else {
        vehicleInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     */
    public Builder setVehicleInfo(
        com.google.maps.routes.v1.VehicleInfo.Builder builderForValue) {
      if (vehicleInfoBuilder_ == null) {
        vehicleInfo_ = builderForValue.build();
        onChanged();
      } else {
        vehicleInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     */
    public Builder mergeVehicleInfo(com.google.maps.routes.v1.VehicleInfo value) {
      if (vehicleInfoBuilder_ == null) {
        if (vehicleInfo_ != null) {
          vehicleInfo_ =
            com.google.maps.routes.v1.VehicleInfo.newBuilder(vehicleInfo_).mergeFrom(value).buildPartial();
        } else {
          vehicleInfo_ = value;
        }
        onChanged();
      } else {
        vehicleInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     */
    public Builder clearVehicleInfo() {
      if (vehicleInfoBuilder_ == null) {
        vehicleInfo_ = null;
        onChanged();
      } else {
        vehicleInfo_ = null;
        vehicleInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     */
    public com.google.maps.routes.v1.VehicleInfo.Builder getVehicleInfoBuilder() {
      
      onChanged();
      return getVehicleInfoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     */
    public com.google.maps.routes.v1.VehicleInfoOrBuilder getVehicleInfoOrBuilder() {
      if (vehicleInfoBuilder_ != null) {
        return vehicleInfoBuilder_.getMessageOrBuilder();
      } else {
        return vehicleInfo_ == null ?
            com.google.maps.routes.v1.VehicleInfo.getDefaultInstance() : vehicleInfo_;
      }
    }
    /**
     * <pre>
     * Optional. Specifies the vehicle information.
     * </pre>
     *
     * <code>.google.maps.routes.v1.VehicleInfo vehicle_info = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.maps.routes.v1.VehicleInfo, com.google.maps.routes.v1.VehicleInfo.Builder, com.google.maps.routes.v1.VehicleInfoOrBuilder> 
        getVehicleInfoFieldBuilder() {
      if (vehicleInfoBuilder_ == null) {
        vehicleInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.maps.routes.v1.VehicleInfo, com.google.maps.routes.v1.VehicleInfo.Builder, com.google.maps.routes.v1.VehicleInfoOrBuilder>(
                getVehicleInfo(),
                getParentForChildren(),
                isClean());
        vehicleInfo_ = null;
      }
      return vehicleInfoBuilder_;
    }

    private java.util.List<java.lang.Integer> tollPasses_ =
      java.util.Collections.emptyList();
    private void ensureTollPassesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        tollPasses_ = new java.util.ArrayList<java.lang.Integer>(tollPasses_);
        bitField0_ |= 0x00000001;
      }
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @return A list containing the tollPasses.
     */
    public java.util.List<com.google.maps.routes.v1.TollPass> getTollPassesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.google.maps.routes.v1.TollPass>(tollPasses_, tollPasses_converter_);
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @return The count of tollPasses.
     */
    public int getTollPassesCount() {
      return tollPasses_.size();
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @param index The index of the element to return.
     * @return The tollPasses at the given index.
     */
    public com.google.maps.routes.v1.TollPass getTollPasses(int index) {
      return tollPasses_converter_.convert(tollPasses_.get(index));
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @param index The index to set the value at.
     * @param value The tollPasses to set.
     * @return This builder for chaining.
     */
    public Builder setTollPasses(
        int index, com.google.maps.routes.v1.TollPass value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTollPassesIsMutable();
      tollPasses_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @param value The tollPasses to add.
     * @return This builder for chaining.
     */
    public Builder addTollPasses(com.google.maps.routes.v1.TollPass value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTollPassesIsMutable();
      tollPasses_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @param values The tollPasses to add.
     * @return This builder for chaining.
     */
    public Builder addAllTollPasses(
        java.lang.Iterable<? extends com.google.maps.routes.v1.TollPass> values) {
      ensureTollPassesIsMutable();
      for (com.google.maps.routes.v1.TollPass value : values) {
        tollPasses_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearTollPasses() {
      tollPasses_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @return A list containing the enum numeric values on the wire for tollPasses.
     */
    public java.util.List<java.lang.Integer>
    getTollPassesValueList() {
      return java.util.Collections.unmodifiableList(tollPasses_);
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of tollPasses at the given index.
     */
    public int getTollPassesValue(int index) {
      return tollPasses_.get(index);
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of tollPasses at the given index.
     * @return This builder for chaining.
     */
    public Builder setTollPassesValue(
        int index, int value) {
      ensureTollPassesIsMutable();
      tollPasses_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @param value The enum numeric value on the wire for tollPasses to add.
     * @return This builder for chaining.
     */
    public Builder addTollPassesValue(int value) {
      ensureTollPassesIsMutable();
      tollPasses_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Encapsulates information about toll passes.
     * TollPass is unset means no available pass.
     * Applies only to the DRIVE and TWO_WHEELER travel modes.
     * </pre>
     *
     * <code>repeated .google.maps.routes.v1.TollPass toll_passes = 6;</code>
     * @param values The enum numeric values on the wire for tollPasses to add.
     * @return This builder for chaining.
     */
    public Builder addAllTollPassesValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureTollPassesIsMutable();
      for (int value : values) {
        tollPasses_.add(value);
      }
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.maps.routes.v1.RouteModifiers)
  }

  // @@protoc_insertion_point(class_scope:google.maps.routes.v1.RouteModifiers)
  private static final com.google.maps.routes.v1.RouteModifiers DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.maps.routes.v1.RouteModifiers();
  }

  public static com.google.maps.routes.v1.RouteModifiers getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RouteModifiers>
      PARSER = new com.google.protobuf.AbstractParser<RouteModifiers>() {
    @java.lang.Override
    public RouteModifiers parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new RouteModifiers(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RouteModifiers> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RouteModifiers> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.routes.v1.RouteModifiers getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

